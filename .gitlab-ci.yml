# # # This file is a template, and might need editing before it works on your project.
# # # To contribute improvements to CI/CD templates, please follow the Development guide at:
# # # https://docs.gitlab.com/ee/development/cicd/templates.html
# # # This specific template is located at:
# # # https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# # # Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# # # If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

# image: eclipse-temurin:17-jdk-jammy

# variables:

#   # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
#   # It should match compileSdkVersion.
#   ANDROID_COMPILE_SDK: "33"

#   # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
#   # It should match buildToolsVersion.
#   ANDROID_BUILD_TOOLS: "33.0.2"

#   # It's what version of the command line tools we're going to download from the official site.
#   # Official Site-> https://developer.android.com/studio/index.html
#   # There, look down below at the cli tools only, sdk tools package is of format:
#   #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
#   # when the script was last modified for latest compileSdkVersion, it was which is written down below
#   ANDROID_SDK_TOOLS: "9477386"

# # # Packages installation before running script
# # before_script:
# #   - apt-get --quiet update --yes
# #   - apt-get --quiet install --yes wget unzip

# #   # Setup path as android_home for moving/exporting the downloaded sdk into it
# #   - export ANDROID_HOME="${PWD}/android-sdk-root"
# #   # Create a new directory at specified location
# #   - install -d $ANDROID_HOME
# #   # Here we are installing androidSDK tools from official source,
# #   # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
# #   # after that unzipping those tools and
# #   # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
# #   - wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
# #   - unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
# #   - mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
# #   - export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin

# #   # Nothing fancy here, just checking sdkManager version
# #   - sdkmanager --version

# #   # use yes to accept all licenses
# #   - yes | sdkmanager --licenses > /dev/null || true
# #   - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
# #   - sdkmanager "platform-tools"
# #   - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

# #   # Not necessary, but just for surity
# #   - chmod +x ./gradlew

# # # Basic android and gradle stuff
# # # Check linting
# # lintDebug:
# #   interruptible: true
# #   stage: build
# #   script:
# #     - ./gradlew -Pci --console=plain :app:lintDebug -PbuildDir=lint
# #   artifacts:
# #     paths:
# #       - app/lint/reports/lint-results-debug.html
# #     expose_as: "lint-report"
# #     when: always

# # # Make Project
# # assembleDebug:
# #   interruptible: true
# #   stage: build
# #   script:
# #     - ./gradlew assembleDebug
# #   artifacts:
# #     paths:
# #       - app/build/outputs/

# # # Run all tests, if any fails, interrupt the pipeline(fail it)
# # debugTests:
# #   needs: [lintDebug, assembleDebug]
# #   interruptible: true
# #   stage: test
# #   script:
# #     - ./gradlew -Pci --console=plain :app:testDebug

# # default:
# #   image: cirrusci/android-sdk:33

# # variables:
#   # Using a fresh runtime for each build to isolate each runtime from any previous builds.
#   GRADLE_OPTS: "-Dorg.gradle.daemon=false"
#   # Variable for the runner at ENSICAEN
#   http_proxy: http://193.49.200.22:3128
#   https_proxy: http://193.49.200.22:3128
#   HTTP_PROXY: http://193.49.200.22:3128
#   HTTPS_PROXY: http://193.49.200.22:3128

# before_script:
#   - chmod +x gradlew
#   - mv gradle.properties.ci gradle.properties
#   - apt-get install findutils

# stages:
#   - build
#   - test
#   - deploy

# build:
#   tags:
#     - gitlab-runner-ensicaen
#   stage: build
#   script:
#     - ./gradlew -Pci --console=plain --build-cache assemble

# unit_test:
#   tags:
#     - gitlab-runner-ensicaen
#   stage: test
#   coverage: "/Coverage Total: ([0-9]{1,3})%/"
#   script:
#     - ./gradlew -Pci --console=plain test jacocoTestReport
#     - cat build/jacocoHtml/index.html | grep -o 'Total[^%]*%' | sed 's/<.*>/ /; s/Total/Coverage Total:/'
#   artifacts:
#     paths:
#       - build/jacocoHtml/

# pages:
#   stage: deploy
#   script:
#     - mkdir public
#     - cp index.html public/index.html
#   artifacts:
#     paths:
#       - public



image: openjdk:11-jdk

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "33"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "33.0.2"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "7583922"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  # Variable for the runner at ENSICAEN
  http_proxy: http://193.49.200.22:3128
  https_proxy: http://193.49.200.22:3128
  HTTP_PROXY: http://193.49.200.22:3128
  HTTPS_PROXY: http://193.49.200.22:3128

# Packages installation before running script
before_script:
  - chmod +x gradlew
  - mv gradle.properties.ci gradle.properties
  - apt-get install findutils
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as ANDROID_SDK_ROOT for moving/exporting the downloaded sdk into it
  - export ANDROID_SDK_ROOT="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_SDK_ROOT
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - wget --output-document=$ANDROID_SDK_ROOT/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  # move to the archive at ANDROID_SDK_ROOT
  - pushd $ANDROID_SDK_ROOT
  - unzip -d cmdline-tools cmdline-tools.zip
  - pushd cmdline-tools
  # since commandline tools version 7583922 the root folder is named "cmdline-tools" so we rename it if necessary
  - mv cmdline-tools tools || true
  - popd
  - popd
  - export PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/tools/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --licenses || true
  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager "platform-tools"
  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

stages:
  - build
  - test
  - deploy

build:
  tags:
    - gitlab-runner-ensicaen
  stage: build
  script:
    - ./gradlew assembleDebug # command to build and debug
  artifacts:
    paths:
      - ./app/build/outputs/ # set artifact path which store your APK file

unitTests:
  tags:
    - gitlab-runner-ensicaen
  stage: test
  script:
    - ./gradlew test

pages:
  stage: deploy
  script:
    - mkdir public
    - cp index.html public/index.html
  artifacts:
    paths:
      - public
